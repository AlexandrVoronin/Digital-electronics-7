
Knight Ride style.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008df  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067e  00000000  00000000  00000bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000370  00000000  00000000  0000123d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000015b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b9  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b0  00000000  00000000  0000198d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001c3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	//initialization new variables
	int Start_number;


    /* first LED */
    DDRC = DDRC | (1<<LED_RED0);
  80:	38 9a       	sbi	0x07, 0	; 7
	PORTC = PORTC & ~(1<<LED_RED0);
  82:	40 98       	cbi	0x08, 0	; 8
	
	/* second LED */
	DDRC = DDRC | (1<<LED_RED1);
  84:	39 9a       	sbi	0x07, 1	; 7
	PORTC = PORTC & ~(1<<LED_RED1);
  86:	41 98       	cbi	0x08, 1	; 8
	
	/* third LED */
	DDRC = DDRC | (1<<LED_RED2);
  88:	3a 9a       	sbi	0x07, 2	; 7
	PORTC = PORTC & ~(1<<LED_RED2);
  8a:	42 98       	cbi	0x08, 2	; 8
		
	/* fourth LED */
	DDRC = DDRC | (1<<LED_RED3);
  8c:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & ~(1<<LED_RED3);
  8e:	43 98       	cbi	0x08, 3	; 8
	
	/* fifth LED */    
	DDRC = DDRC | (1<<LED_RED4);
  90:	3c 9a       	sbi	0x07, 4	; 7
	PORTC = PORTC & ~(1<<LED_RED4);
  92:	44 98       	cbi	0x08, 4	; 8
	
	/*Button*/
	DDRD=DDRD & ~ (1<<BTN);
  94:	50 98       	cbi	0x0a, 0	; 10
	PORTD = PORTD | (1<<BTN);
  96:	58 9a       	sbi	0x0b, 0	; 11
					PORTC = PORTC ^ (1<<LED_RED2); // turn off LED2
					_delay_ms(BLINK_DELAY);						
				}
				else if (Start_number==4)
				{
					PORTC = PORTC ^ (1<<LED_RED4); // turn on LED4
  98:	a0 e1       	ldi	r26, 0x10	; 16
					PORTC = PORTC ^ (1<<LED_RED3); // turn off LED3
  9a:	e8 e0       	ldi	r30, 0x08	; 8
					_delay_ms(BLINK_DELAY);						
				}
				else if (Start_number==3)
				{
					PORTC = PORTC ^ (1<<LED_RED3); // turn on LED3
					PORTC = PORTC ^ (1<<LED_RED2); // turn off LED2
  9c:	74 e0       	ldi	r23, 0x04	; 4
					_delay_ms(BLINK_DELAY);	
				}
				else if (Start_number==2)
				{
					PORTC = PORTC ^ (1<<LED_RED2); // turn on LED2
					PORTC = PORTC ^ (1<<LED_RED1);	// turn off LED1				
  9e:	62 e0       	ldi	r22, 0x02	; 2

				}
				else if (Start_number==1)
				{				
					PORTC = PORTC ^ (1<<LED_RED1); //turn on LED1
					PORTC = PORTC ^ (1<<LED_RED0); // turn off LED0
  a0:	f1 e0       	ldi	r31, 0x01	; 1
	PORTD = PORTD | (1<<BTN);
	
	// Infinite loop
	while(1){

		if (bit_is_clear(PIND,BTN)) // HOLD the button and cycle will start.  
  a2:	48 99       	sbic	0x09, 0	; 9
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <main+0x22>
  a6:	05 c0       	rjmp	.+10     	; 0xb2 <main+0x32>
  a8:	2f 5f       	subi	r18, 0xFF	; 255
  aa:	3f 4f       	sbci	r19, 0xFF	; 255
  ac:	4f 5f       	subi	r20, 0xFF	; 255
  ae:	5f 4f       	sbci	r21, 0xFF	; 255
  b0:	04 c0       	rjmp	.+8      	; 0xba <main+0x3a>
  b2:	41 e0       	ldi	r20, 0x01	; 1
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	20 e0       	ldi	r18, 0x00	; 0
  b8:	30 e0       	ldi	r19, 0x00	; 0
		{
			for (Start_number = 0; Start_number <=5; Start_number= Start_number + 1)
			{
				if (Start_number==0)
  ba:	21 15       	cp	r18, r1
  bc:	31 05       	cpc	r19, r1
  be:	69 f4       	brne	.+26     	; 0xda <main+0x5a>
				{
					PORTC = PORTC ^ (1<<LED_RED0); // turn on LED0
  c0:	88 b1       	in	r24, 0x08	; 8
  c2:	8f 27       	eor	r24, r31
  c4:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	94 e3       	ldi	r25, 0x34	; 52
  ca:	bc e0       	ldi	r27, 0x0C	; 12
  cc:	81 50       	subi	r24, 0x01	; 1
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	b0 40       	sbci	r27, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x4c>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x56>
  d6:	00 00       	nop
  d8:	e7 cf       	rjmp	.-50     	; 0xa8 <main+0x28>
					_delay_ms(BLINK_DELAY);

				}
				else if (Start_number==1)
  da:	21 30       	cpi	r18, 0x01	; 1
  dc:	31 05       	cpc	r19, r1
  de:	81 f4       	brne	.+32     	; 0x100 <main+0x80>
				{				
					PORTC = PORTC ^ (1<<LED_RED1); //turn on LED1
  e0:	88 b1       	in	r24, 0x08	; 8
  e2:	86 27       	eor	r24, r22
  e4:	88 b9       	out	0x08, r24	; 8
					PORTC = PORTC ^ (1<<LED_RED0); // turn off LED0
  e6:	88 b1       	in	r24, 0x08	; 8
  e8:	8f 27       	eor	r24, r31
  ea:	88 b9       	out	0x08, r24	; 8
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	94 e3       	ldi	r25, 0x34	; 52
  f0:	bc e0       	ldi	r27, 0x0C	; 12
  f2:	81 50       	subi	r24, 0x01	; 1
  f4:	90 40       	sbci	r25, 0x00	; 0
  f6:	b0 40       	sbci	r27, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x72>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x7c>
  fc:	00 00       	nop
  fe:	d4 cf       	rjmp	.-88     	; 0xa8 <main+0x28>
					_delay_ms(BLINK_DELAY);	
				}
				else if (Start_number==2)
 100:	22 30       	cpi	r18, 0x02	; 2
 102:	31 05       	cpc	r19, r1
 104:	81 f4       	brne	.+32     	; 0x126 <main+0xa6>
				{
					PORTC = PORTC ^ (1<<LED_RED2); // turn on LED2
 106:	88 b1       	in	r24, 0x08	; 8
 108:	87 27       	eor	r24, r23
 10a:	88 b9       	out	0x08, r24	; 8
					PORTC = PORTC ^ (1<<LED_RED1);	// turn off LED1				
 10c:	88 b1       	in	r24, 0x08	; 8
 10e:	86 27       	eor	r24, r22
 110:	88 b9       	out	0x08, r24	; 8
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	94 e3       	ldi	r25, 0x34	; 52
 116:	bc e0       	ldi	r27, 0x0C	; 12
 118:	81 50       	subi	r24, 0x01	; 1
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	b0 40       	sbci	r27, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x98>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0xa2>
 122:	00 00       	nop
 124:	c1 cf       	rjmp	.-126    	; 0xa8 <main+0x28>
					_delay_ms(BLINK_DELAY);						
				}
				else if (Start_number==3)
 126:	23 30       	cpi	r18, 0x03	; 3
 128:	31 05       	cpc	r19, r1
 12a:	81 f4       	brne	.+32     	; 0x14c <main+0xcc>
				{
					PORTC = PORTC ^ (1<<LED_RED3); // turn on LED3
 12c:	88 b1       	in	r24, 0x08	; 8
 12e:	8e 27       	eor	r24, r30
 130:	88 b9       	out	0x08, r24	; 8
					PORTC = PORTC ^ (1<<LED_RED2); // turn off LED2
 132:	88 b1       	in	r24, 0x08	; 8
 134:	87 27       	eor	r24, r23
 136:	88 b9       	out	0x08, r24	; 8
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	94 e3       	ldi	r25, 0x34	; 52
 13c:	bc e0       	ldi	r27, 0x0C	; 12
 13e:	81 50       	subi	r24, 0x01	; 1
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	b0 40       	sbci	r27, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0xbe>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0xc8>
 148:	00 00       	nop
 14a:	ae cf       	rjmp	.-164    	; 0xa8 <main+0x28>
					_delay_ms(BLINK_DELAY);						
				}
				else if (Start_number==4)
 14c:	24 30       	cpi	r18, 0x04	; 4
 14e:	31 05       	cpc	r19, r1
 150:	81 f4       	brne	.+32     	; 0x172 <main+0xf2>
				{
					PORTC = PORTC ^ (1<<LED_RED4); // turn on LED4
 152:	88 b1       	in	r24, 0x08	; 8
 154:	8a 27       	eor	r24, r26
 156:	88 b9       	out	0x08, r24	; 8
					PORTC = PORTC ^ (1<<LED_RED3); // turn off LED3
 158:	88 b1       	in	r24, 0x08	; 8
 15a:	8e 27       	eor	r24, r30
 15c:	88 b9       	out	0x08, r24	; 8
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	94 e3       	ldi	r25, 0x34	; 52
 162:	bc e0       	ldi	r27, 0x0C	; 12
 164:	81 50       	subi	r24, 0x01	; 1
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	b0 40       	sbci	r27, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <main+0xe4>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0xee>
 16e:	00 00       	nop
 170:	9b cf       	rjmp	.-202    	; 0xa8 <main+0x28>
					_delay_ms(BLINK_DELAY);						
				}
				else if (Start_number == 5)
 172:	25 30       	cpi	r18, 0x05	; 5
 174:	31 05       	cpc	r19, r1
 176:	d1 f5       	brne	.+116    	; 0x1ec <main+0x16c>
				{
				
					PORTC = PORTC ^ (1<<LED_RED4); // turn off LED4
 178:	88 b1       	in	r24, 0x08	; 8
 17a:	8a 27       	eor	r24, r26
 17c:	88 b9       	out	0x08, r24	; 8
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	84 e3       	ldi	r24, 0x34	; 52
 182:	9c e0       	ldi	r25, 0x0C	; 12
 184:	21 50       	subi	r18, 0x01	; 1
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	90 40       	sbci	r25, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x104>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x10e>
 18e:	00 00       	nop
					_delay_ms(BLINK_DELAY);
					PORTC = PORTC ^ (1<<LED_RED3); // turn on LED3
 190:	88 b1       	in	r24, 0x08	; 8
 192:	8e 27       	eor	r24, r30
 194:	88 b9       	out	0x08, r24	; 8
 196:	bf ef       	ldi	r27, 0xFF	; 255
 198:	24 e3       	ldi	r18, 0x34	; 52
 19a:	8c e0       	ldi	r24, 0x0C	; 12
 19c:	b1 50       	subi	r27, 0x01	; 1
 19e:	20 40       	sbci	r18, 0x00	; 0
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x11c>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x126>
 1a6:	00 00       	nop
					_delay_ms(BLINK_DELAY);
					PORTC = PORTC ^ (1<<LED_RED2); // turn on LED2
 1a8:	88 b1       	in	r24, 0x08	; 8
 1aa:	87 27       	eor	r24, r23
 1ac:	88 b9       	out	0x08, r24	; 8
					PORTC = PORTC ^ (1<<LED_RED3); // turn off LED3
 1ae:	88 b1       	in	r24, 0x08	; 8
 1b0:	8e 27       	eor	r24, r30
 1b2:	88 b9       	out	0x08, r24	; 8
 1b4:	9f ef       	ldi	r25, 0xFF	; 255
 1b6:	b4 e3       	ldi	r27, 0x34	; 52
 1b8:	2c e0       	ldi	r18, 0x0C	; 12
 1ba:	91 50       	subi	r25, 0x01	; 1
 1bc:	b0 40       	sbci	r27, 0x00	; 0
 1be:	20 40       	sbci	r18, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x13a>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x144>
 1c4:	00 00       	nop
					_delay_ms(BLINK_DELAY);
					PORTC = PORTC ^ (1<<LED_RED2); //turn off LED2
 1c6:	88 b1       	in	r24, 0x08	; 8
 1c8:	87 27       	eor	r24, r23
 1ca:	88 b9       	out	0x08, r24	; 8
					PORTC = PORTC ^ (1<<LED_RED1); //turn on LED1
 1cc:	88 b1       	in	r24, 0x08	; 8
 1ce:	86 27       	eor	r24, r22
 1d0:	88 b9       	out	0x08, r24	; 8
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	94 e3       	ldi	r25, 0x34	; 52
 1d6:	bc e0       	ldi	r27, 0x0C	; 12
 1d8:	81 50       	subi	r24, 0x01	; 1
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	b0 40       	sbci	r27, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x158>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x162>
 1e2:	00 00       	nop
					_delay_ms(BLINK_DELAY);
					PORTC = PORTC ^ (1<<LED_RED1); //turn off LED1
 1e4:	88 b1       	in	r24, 0x08	; 8
 1e6:	86 27       	eor	r24, r22
 1e8:	88 b9       	out	0x08, r24	; 8
 1ea:	5b cf       	rjmp	.-330    	; 0xa2 <main+0x22>
	// Infinite loop
	while(1){

		if (bit_is_clear(PIND,BTN)) // HOLD the button and cycle will start.  
		{
			for (Start_number = 0; Start_number <=5; Start_number= Start_number + 1)
 1ec:	46 30       	cpi	r20, 0x06	; 6
 1ee:	51 05       	cpc	r21, r1
 1f0:	0c f4       	brge	.+2      	; 0x1f4 <main+0x174>
 1f2:	5a cf       	rjmp	.-332    	; 0xa8 <main+0x28>
 1f4:	56 cf       	rjmp	.-340    	; 0xa2 <main+0x22>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
