
projekt_xdusek30_xsvobo1q.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000051e  000005b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000051e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  0080011c  0080011c  000005ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000600  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a04  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c04  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3b  00000000  00000000  00002dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00003b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006bd  00000000  00000000  00003e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dab  00000000  00000000  00004529  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000052d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_18>
  4c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e1       	ldi	r30, 0x1E	; 30
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 36       	cpi	r26, 0x64	; 100
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0f 01 	call	0x21e	; 0x21e <main>
  9e:	0c 94 8d 02 	jmp	0x51a	; 0x51a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  f0:	29 9a       	sbi	0x05, 1	; 5
  f2:	00 00       	nop
  f4:	29 98       	cbi	0x05, 1	; 5
  f6:	08 95       	ret

000000f8 <lcd_write>:
  f8:	cf 93       	push	r28
  fa:	c8 2f       	mov	r28, r24
  fc:	66 23       	and	r22, r22
  fe:	11 f0       	breq	.+4      	; 0x104 <lcd_write+0xc>
 100:	28 9a       	sbi	0x05, 0	; 5
 102:	01 c0       	rjmp	.+2      	; 0x106 <lcd_write+0xe>
 104:	28 98       	cbi	0x05, 0	; 5
 106:	54 9a       	sbi	0x0a, 4	; 10
 108:	55 9a       	sbi	0x0a, 5	; 10
 10a:	56 9a       	sbi	0x0a, 6	; 10
 10c:	57 9a       	sbi	0x0a, 7	; 10
 10e:	5f 98       	cbi	0x0b, 7	; 11
 110:	5e 98       	cbi	0x0b, 6	; 11
 112:	5d 98       	cbi	0x0b, 5	; 11
 114:	5c 98       	cbi	0x0b, 4	; 11
 116:	cc 23       	and	r28, r28
 118:	0c f4       	brge	.+2      	; 0x11c <lcd_write+0x24>
 11a:	5f 9a       	sbi	0x0b, 7	; 11
 11c:	c6 fd       	sbrc	r28, 6
 11e:	5e 9a       	sbi	0x0b, 6	; 11
 120:	c5 fd       	sbrc	r28, 5
 122:	5d 9a       	sbi	0x0b, 5	; 11
 124:	c4 fd       	sbrc	r28, 4
 126:	5c 9a       	sbi	0x0b, 4	; 11
 128:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 12c:	5f 98       	cbi	0x0b, 7	; 11
 12e:	5e 98       	cbi	0x0b, 6	; 11
 130:	5d 98       	cbi	0x0b, 5	; 11
 132:	5c 98       	cbi	0x0b, 4	; 11
 134:	c3 fd       	sbrc	r28, 3
 136:	5f 9a       	sbi	0x0b, 7	; 11
 138:	c2 fd       	sbrc	r28, 2
 13a:	5e 9a       	sbi	0x0b, 6	; 11
 13c:	c1 fd       	sbrc	r28, 1
 13e:	5d 9a       	sbi	0x0b, 5	; 11
 140:	c0 fd       	sbrc	r28, 0
 142:	5c 9a       	sbi	0x0b, 4	; 11
 144:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 148:	5c 9a       	sbi	0x0b, 4	; 11
 14a:	5d 9a       	sbi	0x0b, 5	; 11
 14c:	5e 9a       	sbi	0x0b, 6	; 11
 14e:	5f 9a       	sbi	0x0b, 7	; 11
 150:	8a ef       	ldi	r24, 0xFA	; 250
 152:	8a 95       	dec	r24
 154:	f1 f7       	brne	.-4      	; 0x152 <lcd_write+0x5a>
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <lcd_command>:
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_write>
 160:	08 95       	ret

00000162 <lcd_gotoxy>:
 162:	61 11       	cpse	r22, r1
 164:	04 c0       	rjmp	.+8      	; 0x16e <lcd_gotoxy+0xc>
 166:	80 58       	subi	r24, 0x80	; 128
 168:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_command>
 16c:	08 95       	ret
 16e:	80 54       	subi	r24, 0x40	; 64
 170:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_command>
 174:	08 95       	ret

00000176 <lcd_clrscr>:
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_command>
 17c:	08 95       	ret

0000017e <lcd_putc>:
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_write>
 184:	08 95       	ret

00000186 <lcd_puts>:
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	ec 01       	movw	r28, r24
 18c:	21 96       	adiw	r28, 0x01	; 1
 18e:	fc 01       	movw	r30, r24
 190:	80 81       	ld	r24, Z
 192:	88 23       	and	r24, r24
 194:	29 f0       	breq	.+10     	; 0x1a0 <lcd_puts+0x1a>
 196:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_putc>
 19a:	89 91       	ld	r24, Y+
 19c:	81 11       	cpse	r24, r1
 19e:	fb cf       	rjmp	.-10     	; 0x196 <lcd_puts+0x10>
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1aa:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ac:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1ae:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1b0:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1b2:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1b4:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1b6:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	8f e9       	ldi	r24, 0x9F	; 159
 1ba:	9f e0       	ldi	r25, 0x0F	; 15
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_init+0x16>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <lcd_init+0x1c>
 1c2:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 1c4:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 1c6:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c8:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1cc:	81 ee       	ldi	r24, 0xE1	; 225
 1ce:	94 e0       	ldi	r25, 0x04	; 4
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init+0x2a>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_init+0x30>
 1d6:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1d8:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1dc:	95 e1       	ldi	r25, 0x15	; 21
 1de:	9a 95       	dec	r25
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0x38>
 1e2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1e4:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1e8:	85 e1       	ldi	r24, 0x15	; 21
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_init+0x44>
 1ee:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1f0:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1f2:	0e 94 78 00 	call	0xf0	; 0xf0 <toggle_e>
 1f6:	95 e1       	ldi	r25, 0x15	; 21
 1f8:	9a 95       	dec	r25
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <lcd_init+0x52>
 1fc:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1fe:	88 e2       	ldi	r24, 0x28	; 40
 200:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 204:	88 e0       	ldi	r24, 0x08	; 8
 206:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 20a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 214:	8c 2f       	mov	r24, r28
 216:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_command>
}/* lcd_init */
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <main>:
uint8_t turn_on_row2;

int main(void)
{
	// Initialize LCD display
    lcd_init(LCD_DISP_ON);
 21e:	8c e0       	ldi	r24, 0x0C	; 12
 220:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_init>
    lcd_gotoxy(1, 0);
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_gotoxy>
    lcd_puts("Distance");
 22c:	80 e1       	ldi	r24, 0x10	; 16
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 c3 00 	call	0x186	; 0x186 <lcd_puts>
    lcd_gotoxy(13, 0);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	8d e0       	ldi	r24, 0x0D	; 13
 238:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_gotoxy>
    lcd_puts("cm");
 23c:	89 e1       	ldi	r24, 0x19	; 25
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 c3 00 	call	0x186	; 0x186 <lcd_puts>

    DIODE_init();
 244:	0e 94 8e 01 	call	0x31c	; 0x31c <DIODE_init>
	
    /* Configure 8-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	TIM0_overflow_4ms();
 248:	85 b5       	in	r24, 0x25	; 37
 24a:	8c 7f       	andi	r24, 0xFC	; 252
 24c:	85 bd       	out	0x25, r24	; 37
 24e:	85 b5       	in	r24, 0x25	; 37
 250:	84 60       	ori	r24, 0x04	; 4
 252:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 254:	ee e6       	ldi	r30, 0x6E	; 110
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	81 60       	ori	r24, 0x01	; 1
 25c:	80 83       	st	Z, r24
    // Enables interrupts by setting the global interrupt mask

    /* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	TIM1_overflow_262ms();
 25e:	e1 e8       	ldi	r30, 0x81	; 129
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	8b 7f       	andi	r24, 0xFB	; 251
 266:	80 83       	st	Z, r24
 268:	80 81       	ld	r24, Z
 26a:	83 60       	ori	r24, 0x03	; 3
 26c:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 26e:	ef e6       	ldi	r30, 0x6F	; 111
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	81 60       	ori	r24, 0x01	; 1
 276:	80 83       	st	Z, r24
    // Enables interrupts by setting the global interrupt mask
	sei();
 278:	78 94       	sei
 27a:	ff cf       	rjmp	.-2      	; 0x27a <main+0x5c>

0000027c <__vector_16>:
    }
	return 0;
}
	
 	ISR(TIMER0_OVF_vect)
 	{
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
 		static uint8_t row = 0;
	    uint8_t line = 0;
 		if (row == 0)
 29e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 2a2:	81 11       	cpse	r24, r1
 2a4:	0a c0       	rjmp	.+20     	; 0x2ba <__vector_16+0x3e>
 		{ 
 			DIODE_update_shift_regs_FRONT(turn_on_row1);
 2a6:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <turn_on_row1>
 2aa:	0e 94 a3 01 	call	0x346	; 0x346 <DIODE_update_shift_regs_FRONT>
 			row = 0;
 2ae:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
			line =1;
 		}
 		if (line == 1)
 		{
 			DIODE_update_shift_regs_REAR(turn_on_row2);
 2b2:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <turn_on_row2>
 2b6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <DIODE_update_shift_regs_REAR>
 			line = 1;			
 		}

	}
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	7f 91       	pop	r23
 2c8:	6f 91       	pop	r22
 2ca:	5f 91       	pop	r21
 2cc:	4f 91       	pop	r20
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <__vector_13>:
	
	ISR(TIMER1_OVF_vect)
	{
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	8f 93       	push	r24
		turn_on_row1++;
 2e8:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <turn_on_row1>
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
		if (turn_on_row1 > 7)
 2ee:	88 30       	cpi	r24, 0x08	; 8
 2f0:	18 f4       	brcc	.+6      	; 0x2f8 <__vector_13+0x1c>

	}
	
	ISR(TIMER1_OVF_vect)
	{
		turn_on_row1++;
 2f2:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <turn_on_row1>
 2f6:	0c c0       	rjmp	.+24     	; 0x310 <__vector_13+0x34>
		if (turn_on_row1 > 7)
		{
			turn_on_row1 = 0;
 2f8:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <turn_on_row1>
			turn_on_row2++;
 2fc:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <turn_on_row2>
 300:	8f 5f       	subi	r24, 0xFF	; 255
			if (turn_on_row2 > 5)
 302:	86 30       	cpi	r24, 0x06	; 6
 304:	18 f4       	brcc	.+6      	; 0x30c <__vector_13+0x30>
	{
		turn_on_row1++;
		if (turn_on_row1 > 7)
		{
			turn_on_row1 = 0;
			turn_on_row2++;
 306:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <turn_on_row2>
 30a:	02 c0       	rjmp	.+4      	; 0x310 <__vector_13+0x34>
			if (turn_on_row2 > 5)
			{
				turn_on_row2 = 0;
 30c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <turn_on_row2>
			}
		}
	}
 310:	8f 91       	pop	r24
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <DIODE_init>:

/* Function definitions ----------------------------------------------*/
void DIODE_init(void)
{
	/* Configuration of SSD signals */
	GPIO_config_output(&DDRC, DATA_INPUT_REAR);
 31c:	63 e0       	ldi	r22, 0x03	; 3
 31e:	87 e2       	ldi	r24, 0x27	; 39
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC, DATA_INPUT_FRONT);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	87 e2       	ldi	r24, 0x27	; 39
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC, SEGMENT_CLK);
 330:	62 e0       	ldi	r22, 0x02	; 2
 332:	87 e2       	ldi	r24, 0x27	; 39
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC, SEGMENT_LATCH);
 33a:	61 e0       	ldi	r22, 0x01	; 1
 33c:	87 e2       	ldi	r24, 0x27	; 39
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 344:	08 95       	ret

00000346 <DIODE_update_shift_regs_FRONT>:

}

/*--------------------------------------------------------------------*/
void DIODE_update_shift_regs_FRONT(uint8_t number)
{
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
	uint8_t bit_number;
	number = diode_number[number];
 34a:	e8 2f       	mov	r30, r24
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	e8 5f       	subi	r30, 0xF8	; 248
 350:	fe 4f       	sbci	r31, 0xFE	; 254
 352:	d0 81       	ld	r29, Z
/*	row = diode_row[row];*/
	
	// 
	GPIO_write_low(&PORTC,DATA_INPUT_FRONT);
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	88 e2       	ldi	r24, 0x28	; 40
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTC, SEGMENT_CLK);
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	88 e2       	ldi	r24, 0x28	; 40
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTC, SEGMENT_LATCH);	
 368:	61 e0       	ldi	r22, 0x01	; 1
 36a:	88 e2       	ldi	r24, 0x28	; 40
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 372:	85 e0       	ldi	r24, 0x05	; 5
 374:	8a 95       	dec	r24
 376:	f1 f7       	brne	.-4      	; 0x374 <DIODE_update_shift_regs_FRONT+0x2e>
 378:	00 00       	nop
 37a:	c8 e0       	ldi	r28, 0x08	; 8
	

	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "segments")
		if ((number & 1) == 0)
 37c:	d0 fd       	sbrc	r29, 0
 37e:	06 c0       	rjmp	.+12     	; 0x38c <DIODE_update_shift_regs_FRONT+0x46>
		{
			GPIO_write_low(&PORTC,DATA_INPUT_FRONT);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	88 e2       	ldi	r24, 0x28	; 40
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 38a:	05 c0       	rjmp	.+10     	; 0x396 <DIODE_update_shift_regs_FRONT+0x50>
		}
		else
		{
			GPIO_write_high(&PORTC, DATA_INPUT_FRONT);
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	88 e2       	ldi	r24, 0x28	; 40
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 396:	85 e0       	ldi	r24, 0x05	; 5
 398:	8a 95       	dec	r24
 39a:	f1 f7       	brne	.-4      	; 0x398 <DIODE_update_shift_regs_FRONT+0x52>
 39c:	00 00       	nop
		}

 		// Wait 1 us
 		_delay_us(1);
 		// Pull CLK high
 		GPIO_write_high(&PORTC,SEGMENT_CLK);
 39e:	62 e0       	ldi	r22, 0x02	; 2
 3a0:	88 e2       	ldi	r24, 0x28	; 40
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 3a8:	85 e0       	ldi	r24, 0x05	; 5
 3aa:	8a 95       	dec	r24
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <DIODE_update_shift_regs_FRONT+0x64>
 3ae:	00 00       	nop
 		// Wait 1 us
 		_delay_us(1);
 		// Pull CLK low
 		GPIO_write_low(&PORTC,SEGMENT_CLK);
 3b0:	62 e0       	ldi	r22, 0x02	; 2
 3b2:	88 e2       	ldi	r24, 0x28	; 40
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		 		
		number = number >> 1;
 3ba:	d6 95       	lsr	r29
 3bc:	c1 50       	subi	r28, 0x01	; 1
	GPIO_write_low(&PORTC, SEGMENT_LATCH);	
	// Wait 1 us
	_delay_us(1);
	

	for (bit_number = 0; bit_number < 8; bit_number++)
 3be:	f1 f6       	brne	.-68     	; 0x37c <DIODE_update_shift_regs_FRONT+0x36>
// 
// 
// 		}

// 	// Pull LATCH high
 	GPIO_write_high(&PORTC,SEGMENT_LATCH);
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	88 e2       	ldi	r24, 0x28	; 40
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 3ca:	85 e0       	ldi	r24, 0x05	; 5
 3cc:	8a 95       	dec	r24
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <DIODE_update_shift_regs_FRONT+0x86>
 3d0:	00 00       	nop

	// Wait 1 us
	_delay_us(1);

}
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <DIODE_update_shift_regs_REAR>:

/*--------------------------------------------------------------------*/
void DIODE_update_shift_regs_REAR(uint8_t number1)
{
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
	uint8_t bit_number;
	number1 = diode_number1[number1];
 3dc:	e8 2f       	mov	r30, r24
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	e0 50       	subi	r30, 0x00	; 0
 3e2:	ff 4f       	sbci	r31, 0xFF	; 255
 3e4:	d0 81       	ld	r29, Z
	/*	row = diode_row[row];*/
	
	//
	GPIO_write_low(&PORTC,DATA_INPUT_REAR);
 3e6:	63 e0       	ldi	r22, 0x03	; 3
 3e8:	88 e2       	ldi	r24, 0x28	; 40
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTC, SEGMENT_CLK);
 3f0:	62 e0       	ldi	r22, 0x02	; 2
 3f2:	88 e2       	ldi	r24, 0x28	; 40
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTC, SEGMENT_LATCH);
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	88 e2       	ldi	r24, 0x28	; 40
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 404:	85 e0       	ldi	r24, 0x05	; 5
 406:	8a 95       	dec	r24
 408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40a:	00 00       	nop
 40c:	c8 e0       	ldi	r28, 0x08	; 8
	

	for (bit_number = 0; bit_number < 8; bit_number++)
	{
		// Output DATA value (bit 0 of "segments")
		if ((number1 & 1) == 0)
 40e:	d0 fd       	sbrc	r29, 0
 410:	06 c0       	rjmp	.+12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		{
			GPIO_write_low(&PORTC,DATA_INPUT_REAR);
 412:	63 e0       	ldi	r22, 0x03	; 3
 414:	88 e2       	ldi	r24, 0x28	; 40
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 41c:	05 c0       	rjmp	.+10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
		}
		else
		{
			GPIO_write_high(&PORTC, DATA_INPUT_REAR);
 41e:	63 e0       	ldi	r22, 0x03	; 3
 420:	88 e2       	ldi	r24, 0x28	; 40
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 428:	85 e0       	ldi	r24, 0x05	; 5
 42a:	8a 95       	dec	r24
 42c:	f1 f7       	brne	.-4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42e:	00 00       	nop
		}

		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTC,SEGMENT_CLK);
 430:	62 e0       	ldi	r22, 0x02	; 2
 432:	88 e2       	ldi	r24, 0x28	; 40
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 43a:	85 e0       	ldi	r24, 0x05	; 5
 43c:	8a 95       	dec	r24
 43e:	f1 f7       	brne	.-4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 440:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTC,SEGMENT_CLK);
 442:	62 e0       	ldi	r22, 0x02	; 2
 444:	88 e2       	ldi	r24, 0x28	; 40
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
		
		number1 = number1 >> 1;
 44c:	d6 95       	lsr	r29
 44e:	c1 50       	subi	r28, 0x01	; 1
	GPIO_write_low(&PORTC, SEGMENT_LATCH);
	// Wait 1 us
	_delay_us(1);
	

	for (bit_number = 0; bit_number < 8; bit_number++)
 450:	f1 f6       	brne	.-68     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		
	}
	
	
	// 	// Pull LATCH high
	GPIO_write_high(&PORTC,SEGMENT_LATCH);
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	88 e2       	ldi	r24, 0x28	; 40
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 45c:	85 e0       	ldi	r24, 0x05	; 5
 45e:	8a 95       	dec	r24
 460:	f1 f7       	brne	.-4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 462:	00 00       	nop

	// Wait 1 us
	_delay_us(1);

}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <__vector_18>:

/*************************************************************************
 * Function: UART Receive Complete interrupt
 * Purpose:  called when the UART has received a character
 **************************************************************************/
{
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	8f 93       	push	r24
 478:	9f 93       	push	r25
 47a:	ef 93       	push	r30
 47c:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError = 0;


    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 47e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    data = UART0_DATA;
 482:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    #if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE) | _BV(DOR) | _BV(UPE) );
    #elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0) | _BV(DOR0) | _BV(UPE0) );
 486:	8c 71       	andi	r24, 0x1C	; 28
    #elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE) | _BV(DOR) );
    #endif

    /* calculate buffer index */
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 488:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <UART_RxHead>
 48c:	ef 5f       	subi	r30, 0xFF	; 255
 48e:	ef 71       	andi	r30, 0x1F	; 31

    if (tmphead == UART_RxTail)
 490:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <UART_RxTail>
 494:	e9 17       	cp	r30, r25
 496:	39 f0       	breq	.+14     	; 0x4a6 <__vector_18+0x3c>
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }
    else
    {
        /* store new index */
        UART_RxHead = tmphead;
 498:	e0 93 1f 01 	sts	0x011F, r30	; 0x80011f <UART_RxHead>
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	ee 5d       	subi	r30, 0xDE	; 222
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254
 4a2:	20 83       	st	Z, r18
 4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <__vector_18+0x3e>
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;

    if (tmphead == UART_RxTail)
    {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 4a6:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;
 4a8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <UART_LastRxError>
 4ac:	89 2b       	or	r24, r25
 4ae:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <UART_LastRxError>
}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	2f 91       	pop	r18
 4bc:	0f 90       	pop	r0
 4be:	0f be       	out	0x3f, r0	; 63
 4c0:	0f 90       	pop	r0
 4c2:	1f 90       	pop	r1
 4c4:	18 95       	reti

000004c6 <__vector_19>:

/*************************************************************************
 * Function: UART Data Register Empty interrupt
 * Purpose:  called when the UART is ready to transmit the next byte
 **************************************************************************/
{
 4c6:	1f 92       	push	r1
 4c8:	0f 92       	push	r0
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	0f 92       	push	r0
 4ce:	11 24       	eor	r1, r1
 4d0:	8f 93       	push	r24
 4d2:	9f 93       	push	r25
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
    unsigned char tmptail;


    if (UART_TxHead != UART_TxTail)
 4d8:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <UART_TxHead>
 4dc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <UART_TxTail>
 4e0:	98 17       	cp	r25, r24
 4e2:	69 f0       	breq	.+26     	; 0x4fe <__vector_19+0x38>
    {
        /* calculate and store new buffer index */
        tmptail     = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 4e4:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <UART_TxTail>
 4e8:	ef 5f       	subi	r30, 0xFF	; 255
 4ea:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 4ec:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <UART_TxTail>
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail]; /* start transmission */
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	ee 5b       	subi	r30, 0xBE	; 190
 4f4:	fe 4f       	sbci	r31, 0xFE	; 254
 4f6:	80 81       	ld	r24, Z
 4f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 4fc:	05 c0       	rjmp	.+10     	; 0x508 <__vector_19+0x42>
    }
    else
    {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 4fe:	e1 ec       	ldi	r30, 0xC1	; 193
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	8f 7d       	andi	r24, 0xDF	; 223
 506:	80 83       	st	Z, r24
    }
}
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	9f 91       	pop	r25
 50e:	8f 91       	pop	r24
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
 516:	1f 90       	pop	r1
 518:	18 95       	reti

0000051a <_exit>:
 51a:	f8 94       	cli

0000051c <__stop_program>:
 51c:	ff cf       	rjmp	.-2      	; 0x51c <__stop_program>
